import math
import random
import matplotlib.pyplot as plt

# 生成城市坐标
def generate_cities(n_cities):
    cities = []
    for _ in range(n_cities):
        x = random.uniform(0, 100)
        y = random.uniform(0, 100)
        cities.append((x, y))
    return cities

# 计算路径总长度
def path_distance(path):
    distance = 0
    for i in range(len(path)):
        x1, y1 = cities[path[i]]
        x2, y2 = cities[path[(i+1)%len(path)]]
        distance += math.sqrt((x2-x1)**2 + (y2-y1)**2)
    return distance

# 生成邻域解（交换两个城市）
def get_neighbor(path):
    new_path = path.copy()
    i = random.randint(0, len(path)-1)
    j = random.randint(0, len(path)-1)
    new_path[i], new_path[j] = new_path[j], new_path[i]
    return new_path

# 模拟退火算法
def simulated_annealing(cities, T=10000, T_min=1e-3, alpha=0.99, max_iter=1000):
    current_path = list(range(len(cities)))
    random.shuffle(current_path)
    current_cost = path_distance(current_path)
    
    best_path = current_path.copy()
    best_cost = current_cost
    
    costs = [current_cost]
    temperatures = [T]
    
    while T > T_min:
        for _ in range(max_iter):
            new_path = get_neighbor(current_path)
            new_cost = path_distance(new_path)
            delta = new_cost - current_cost
            
            if delta < 0 or random.random() < math.exp(-delta / T):
                current_path = new_path
                current_cost = new_cost
                
                if current_cost < best_cost:
                    best_path = current_path.copy()
                    best_cost = current_cost
        
        costs.append(current_cost)
        temperatures.append(T)
        T *= alpha
    
    return best_path, best_cost, costs, temperatures

# 参数设置
n_cities = 20
cities = generate_cities(n_cities)

# 运行算法
best_path, best_cost, costs, temperatures = simulated_annealing(
    cities, T=10000, alpha=0.995, max_iter=1000
)

# 可视化结果
plt.figure(figsize=(15,5))

# 路径图
plt.subplot(1,3,1)
x = [cities[i][0] for i in best_path] + [cities[best_path[0]][0]]
y = [cities[i][1] for i in best_path] + [cities[best_path[0]][1]]
plt.plot(x, y, 'o-')
plt.title(f"Optimal Path (Cost: {best_cost:.2f})")

# 代价变化
plt.subplot(1,3,2)
plt.plot(costs)
plt.title("Cost Progression")
plt.xlabel("Iteration")
plt.ylabel("Distance")

# 温度变化
plt.subplot(1,3,3)
plt.plot(temperatures)
plt.title("Temperature Progression")
plt.xlabel("Iteration")
plt.ylabel("Temperature")

plt.tight_layout()
plt.show()